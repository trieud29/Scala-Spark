package wikipedia

import org.apache.spark.SparkContext
import org.apache.spark.rdd.RDD
import org.apache.spark.SparkConf

case class WikipediaArticle(title: String, text: String) {
  /**
    * @return Whether the text of this article mentions `lang` or not
    * @param lang Language to look for (e.g. "Scala")
    */
  def mentionsLanguage(lang: String): Boolean = text.split(' ').contains(lang)
}

/** Main object */
object WikipediaRanking {

  val langs: List[String] = List(
    "JavaScript", "Java", "PHP", "Python", "C#", "C++", "Ruby", "CSS",
    "Objective-C", "Perl", "Scala", "Haskell", "MATLAB", "Clojure", "Groovy")

  // It can sometimes be useful to create a `SparkConf` object to store all the 
  // configuration parameter values for our Spark context, rather than inserting 
  // all the options in the `SparkContext` constructor.
  val conf: SparkConf = new SparkConf().setMaster("local").setAppName("Wikipedia Ranking")

  // Then, to create the Spark context, we can simply pass the `SparkConf` object 
  // to the `SparkContext` constructor.
  val sc: SparkContext = new SparkContext(conf)

  /** Main function */
  def main(args: Array[String]): Unit = {

    // Languages ranked according to (1)
    val langsRanked: List[(String, Int)] =
      timed("Part 1: naive ranking", rankLangs(langs, wikiRdd))

    // An inverted index mapping languages to wikipedia pages on which they appear
    def index: RDD[(String, Iterable[WikipediaArticle])] = makeIndex(langs, wikiRdd)

    // Languages ranked according to (2), using the inverted index
    val langsRanked2: List[(String, Int)]
    = timed("Part 2: ranking using inverted index", rankLangsUsingIndex(index))

    // Languages ranked according to (3)
    val langsRanked3: List[(String, Int)]
    = timed("Part 3: ranking using reduceByKey", rankLangsReduceByKey(langs, wikiRdd))

    // Output the speed of each ranking
    println(timing)
    sc.stop()

  }



  val wikiRdd: RDD[WikipediaArticle] = sc.textFile(WikipediaData.filePath).map(l => WikipediaData.parse(l)).cache()


 

  /** Returns the number of articles in which the language `lang` occurs.
    */
  implicit val intDescOrdering = Ordering.Int.reverse

  def occurrencesOfLang(lang: String, rdd: RDD[WikipediaArticle]): Int =
    rdd.aggregate(0)((u,article)=> u + bool(article.mentionsLanguage(lang)),_ + _)

  implicit def bool(b:Boolean): Int = if (b) 1 else 0


 
  def rankLangs(langs: List[String], rdd: RDD[WikipediaArticle]): List[(String, Int)] =
    langs.map(l=> (l,occurrencesOfLang(l,rdd))).sortBy(_._2)



  /** Computes an inverted index of the set of articles, mapping each language
    * to the Wikipedia pages in which it occurs.
    */
  def makeIndex(langs: List[String], rdd: RDD[WikipediaArticle]): RDD[(String, Iterable[WikipediaArticle])] = {
    rdd.flatMap(article => langs.map(l => if (article.mentionsLanguage(l)) (l, article) else null))
      .filter(_ != null)
      .groupByKey()
  }



  // 1. First, create a collection of all pairs (l, wa), where l is a
  //    language and wa is a Wikipedia article.
  // val pairs: RDD[(String,WikipediaArticle)] = ???

  // 2. Second, filter the `pairs` RDD to create a collection of all
  //    pairs (l, wa) where wa is an article that mentions language l.
  // val mentionedPairs: RDD[(String,WikipediaArticle)] = ???

  // 3. Finally, return the result of performing a "group by" on `mentionedPairs`
  //    which yields key-value pairs where the key is a language `l` and value is
  //    the collection of wikipedia articles that mention `l`.




  /** Uses `reduceByKey` to compute the index and the ranking simultaneously.
    */
  def rankLangsReduceByKey(langs: List[String], rdd: RDD[WikipediaArticle]): List[(String, Int)] =
    rdd.flatMap(article => langs.map(l => (l, if (article.mentionsLanguage(l)) 1 else 0)))
      .reduceByKey(_ + _)
      .sortBy(_._2)
      .collect().toList


  val timing = new StringBuffer
  def timed[T](label: String, code: => T): T = {
    val start = System.currentTimeMillis()
    val result = code
    val stop = System.currentTimeMillis()
    timing.append(s"Processing $label took ${stop - start} ms.\n")
    result
  }
}
